generator client {
  provider = "prisma-client-js"
}

datasource db {
  // https://www.prisma.io/docs/orm/overview/databases/postgresql
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum content_type {
  Text
  Image
  Video
  Audio
  File
}

enum feature_kind {
  Management
  Integration
}

enum message_role {
  System
  User
  Assistant
  Tool
}

enum organization_role {
  Owner
  Editor
  Viewer
}

model Feature {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code        String        @unique @db.VarChar(50)
  name        String        @db.VarChar(50)
  description String?       @db.VarChar(180)
  kind        feature_kind  @default(Management)
  enabled     Boolean       @default(true)
  created_at  DateTime      @default(now()) @db.Timestamp
  updated_at  DateTime      @default(now()) @updatedAt @db.Timestamp
  Integration Integration[]

  @@map("features")
}

model Integration {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  feature_code String   @db.VarChar(50)
  name         String   @db.VarChar(50)
  credentials  String   @db.VarChar(2048)
  settings     Json     @default("{}") @db.Json
  enabled      Boolean  @default(true)
  created_at   DateTime @default(now()) @db.Timestamp
  updated_at   DateTime @default(now()) @updatedAt @db.Timestamp

  // Relationships
  feature Feature @relation(fields: [feature_code], references: [code])

  @@map("integrations")
}

model Invite {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organization_id String            @db.Uuid
  email           String            @unique @db.VarChar(100)
  role            organization_role @default(Editor)
  code            String            @unique @db.Uuid
  expires         DateTime          @db.Timestamp
  created_at      DateTime          @default(now()) @db.Timestamp
  updated_at      DateTime          @default(now()) @updatedAt @db.Timestamp

  @@map("invites")
}

model Member {
  id         String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String            @unique @db.Uuid
  role       organization_role
  created_at DateTime          @default(now()) @db.Timestamp
  updated_at DateTime          @default(now()) @updatedAt @db.Timestamp

  // Relationships
  user User @relation(fields: [user_id], references: [id])

  @@map("members")
}

model ProjectPrompt {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  project_id  String   @db.Uuid
  tool_id     String?  @db.Uuid
  name        String   @db.VarChar(50)
  description String?  @db.VarChar(180)
  system      String?
  user        String
  meta        Boolean
  created_at  DateTime @default(now()) @db.Timestamp
  updated_at  DateTime @default(now()) @updatedAt @db.Timestamp

  // Relationships
  project        Project               @relation(fields: [project_id], references: [id])
  tool           ProjectTool?          @relation(fields: [tool_id], references: [id])
  thread_presets ProjectThreadPreset[]

  @@map("project_prompts")
}

model ProjectThreadMessage {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  thread_id  String       @db.Uuid
  role       message_role
  type       content_type @default(Text)
  content    String       @db.Text
  created_at DateTime     @default(now()) @db.Timestamp
  updated_at DateTime     @default(now()) @updatedAt @db.Timestamp

  // Relationships
  thread ProjectThread @relation(fields: [thread_id], references: [id])

  @@map("project_thread_messages")
}

model ProjectThreadPreset {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  project_id         String   @db.Uuid
  prompt_id          String   @db.Uuid
  name               String   @db.VarChar(50)
  description        String?  @db.VarChar(180)
  model              String   @db.VarChar(100)
  temperature        Float    @default(0.8)
  max_tokens         Int      @default(1024)
  top_p              Float    @default(0.95)
  top_k              Int      @default(40)
  min_p              Float    @default(0.05)
  frequency_penalty  Float    @default(0.0)
  presence_penalty   Float    @default(0.0)
  repetition_penalty Float    @default(1.10)
  created_at         DateTime @default(now()) @db.Timestamp
  updated_at         DateTime @default(now()) @updatedAt @db.Timestamp

  // Relationships
  project Project       @relation(fields: [project_id], references: [id])
  prompt  ProjectPrompt @relation(fields: [prompt_id], references: [id])

  @@map("project_thread_presets")
}

model ProjectThread {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  project_id         String   @db.Uuid
  name               String   @db.VarChar(50)
  description        String?  @db.VarChar(180)
  model              String   @db.VarChar(100)
  temperature        Float    @default(0.8)
  max_tokens         Int      @default(1024)
  top_p              Float    @default(0.95)
  top_k              Int      @default(40)
  min_p              Float    @default(0.05)
  frequency_penalty  Float    @default(0.0)
  presence_penalty   Float    @default(0.0)
  repetition_penalty Float    @default(1.10)
  created_at         DateTime @default(now()) @db.Timestamp
  updated_at         DateTime @default(now()) @updatedAt @db.Timestamp

  // Relationships
  project  Project                @relation(fields: [project_id], references: [id])
  messages ProjectThreadMessage[]

  @@map("project_threads")
}

model ProjectTool {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  project_id  String   @db.Uuid
  name        String   @db.VarChar(50)
  description String?  @db.VarChar(180)
  parameters  Json     @default("{}") @db.Json
  code        String   @db.VarChar(16384)
  created_at  DateTime @default(now()) @db.Timestamp
  updated_at  DateTime @default(now()) @updatedAt @db.Timestamp

  // Relationships
  project Project         @relation(fields: [project_id], references: [id])
  prompts ProjectPrompt[]

  @@map("project_tools")
}

model Project {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @db.VarChar(50)
  description String?  @db.VarChar(180)
  default     Boolean  @default(false)
  created_at  DateTime @default(now()) @db.Timestamp
  updated_at  DateTime @default(now()) @updatedAt @db.Timestamp

  // Relationships
  tools          ProjectTool[]
  prompts        ProjectPrompt[]
  thread_presets ProjectThreadPreset[]
  threads        ProjectThread[]

  @@map("projects")
}

model Session {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String?  @db.Uuid
  session_token String   @db.Text
  user_agent    String   @db.Text
  expires       DateTime @db.Timestamp
  created_at    DateTime @default(now()) @db.Timestamp
  updated_at    DateTime @default(now()) @updatedAt @db.Timestamp

  // Relationships
  user User? @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name     String    @db.VarChar(50)
  last_name      String    @db.VarChar(50)
  email          String?   @unique @db.VarChar(100)
  password       String?
  email_verified DateTime?
  image          String?   @db.VarChar(255)
  bio            String?   @db.VarChar(180)
  website        String?   @db.VarChar(100)
  last_seen      DateTime? @default(now()) @db.Timestamp
  created_at     DateTime  @default(now()) @db.Timestamp
  updated_at     DateTime  @default(now()) @updatedAt @db.Timestamp

  // Relationships
  sessions Session[]
  members  Member[]

  @@map("users")
}
